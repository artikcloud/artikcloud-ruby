=begin
#ARTIK Cloud API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module ArtikCloud
  # 
  class Subscription
    # AWS region (if subscriptionType is awsKinesis
    attr_accessor :aws_region

    # Include Shared Devices
    attr_accessor :include_shared_devices

    # Description
    attr_accessor :description

    # AWS key (if subscriptionType is awsKinesis
    attr_accessor :aws_key

    # AWS secret (if subscriptionType is awsKinesis
    attr_accessor :aws_secret

    # Creation timestamp
    attr_accessor :created_on

    # AWS Kinesis stream name (if subscriptionType is awsKinesis
    attr_accessor :aws_kinesis_stream_name

    # User ID
    attr_accessor :uid

    # Message type
    attr_accessor :message_type

    # Destination device ID
    attr_accessor :ddid

    # Subscription type (either httpCallback or awsKinesis, default to httpCallback)
    attr_accessor :subscription_type

    # Name
    attr_accessor :name

    # Source device ID
    attr_accessor :sdid

    # Callback URL
    attr_accessor :callback_url

    # Subscription ID
    attr_accessor :id

    # Application ID
    attr_accessor :aid

    # Source device type ID
    attr_accessor :sdtid


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'aws_region' => :'awsRegion',
        :'include_shared_devices' => :'includeSharedDevices',
        :'description' => :'description',
        :'aws_key' => :'awsKey',
        :'aws_secret' => :'awsSecret',
        :'created_on' => :'createdOn',
        :'aws_kinesis_stream_name' => :'awsKinesisStreamName',
        :'uid' => :'uid',
        :'message_type' => :'messageType',
        :'ddid' => :'ddid',
        :'subscription_type' => :'subscriptionType',
        :'name' => :'name',
        :'sdid' => :'sdid',
        :'callback_url' => :'callbackUrl',
        :'id' => :'id',
        :'aid' => :'aid',
        :'sdtid' => :'sdtid'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'aws_region' => :'String',
        :'include_shared_devices' => :'BOOLEAN',
        :'description' => :'String',
        :'aws_key' => :'String',
        :'aws_secret' => :'String',
        :'created_on' => :'Integer',
        :'aws_kinesis_stream_name' => :'String',
        :'uid' => :'String',
        :'message_type' => :'String',
        :'ddid' => :'String',
        :'subscription_type' => :'String',
        :'name' => :'String',
        :'sdid' => :'String',
        :'callback_url' => :'String',
        :'id' => :'String',
        :'aid' => :'String',
        :'sdtid' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'awsRegion')
        self.aws_region = attributes[:'awsRegion']
      end

      if attributes.has_key?(:'includeSharedDevices')
        self.include_shared_devices = attributes[:'includeSharedDevices']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'awsKey')
        self.aws_key = attributes[:'awsKey']
      end

      if attributes.has_key?(:'awsSecret')
        self.aws_secret = attributes[:'awsSecret']
      end

      if attributes.has_key?(:'createdOn')
        self.created_on = attributes[:'createdOn']
      end

      if attributes.has_key?(:'awsKinesisStreamName')
        self.aws_kinesis_stream_name = attributes[:'awsKinesisStreamName']
      end

      if attributes.has_key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.has_key?(:'messageType')
        self.message_type = attributes[:'messageType']
      end

      if attributes.has_key?(:'ddid')
        self.ddid = attributes[:'ddid']
      end

      if attributes.has_key?(:'subscriptionType')
        self.subscription_type = attributes[:'subscriptionType']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'sdid')
        self.sdid = attributes[:'sdid']
      end

      if attributes.has_key?(:'callbackUrl')
        self.callback_url = attributes[:'callbackUrl']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'aid')
        self.aid = attributes[:'aid']
      end

      if attributes.has_key?(:'sdtid')
        self.sdtid = attributes[:'sdtid']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aws_region == o.aws_region &&
          include_shared_devices == o.include_shared_devices &&
          description == o.description &&
          aws_key == o.aws_key &&
          aws_secret == o.aws_secret &&
          created_on == o.created_on &&
          aws_kinesis_stream_name == o.aws_kinesis_stream_name &&
          uid == o.uid &&
          message_type == o.message_type &&
          ddid == o.ddid &&
          subscription_type == o.subscription_type &&
          name == o.name &&
          sdid == o.sdid &&
          callback_url == o.callback_url &&
          id == o.id &&
          aid == o.aid &&
          sdtid == o.sdtid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [aws_region, include_shared_devices, description, aws_key, aws_secret, created_on, aws_kinesis_stream_name, uid, message_type, ddid, subscription_type, name, sdid, callback_url, id, aid, sdtid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ArtikCloud.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
