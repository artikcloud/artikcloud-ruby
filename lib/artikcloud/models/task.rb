=begin
#ARTIK Cloud API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module ArtikCloud
  # 
  class Task
    # Filter
    attr_accessor :filter

    # Task type
    attr_accessor :task_type

    # Modified on
    attr_accessor :modified_on

    # Device Type ID
    attr_accessor :dtid

    # Status counts
    attr_accessor :status_counts

    # Property
    attr_accessor :property

    # Task ID
    attr_accessor :id

    # Device IDs
    attr_accessor :dids

    # Task parameters
    attr_accessor :task_parameters

    # Created on
    attr_accessor :created_on

    # Status
    attr_accessor :status


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'filter' => :'filter',
        :'task_type' => :'taskType',
        :'modified_on' => :'modifiedOn',
        :'dtid' => :'dtid',
        :'status_counts' => :'statusCounts',
        :'property' => :'property',
        :'id' => :'id',
        :'dids' => :'dids',
        :'task_parameters' => :'taskParameters',
        :'created_on' => :'createdOn',
        :'status' => :'status'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'filter' => :'String',
        :'task_type' => :'String',
        :'modified_on' => :'Integer',
        :'dtid' => :'String',
        :'status_counts' => :'TaskStatusCounts',
        :'property' => :'String',
        :'id' => :'String',
        :'dids' => :'Array<String>',
        :'task_parameters' => :'TaskParameters',
        :'created_on' => :'Integer',
        :'status' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'filter')
        self.filter = attributes[:'filter']
      end

      if attributes.has_key?(:'taskType')
        self.task_type = attributes[:'taskType']
      end

      if attributes.has_key?(:'modifiedOn')
        self.modified_on = attributes[:'modifiedOn']
      end

      if attributes.has_key?(:'dtid')
        self.dtid = attributes[:'dtid']
      end

      if attributes.has_key?(:'statusCounts')
        self.status_counts = attributes[:'statusCounts']
      end

      if attributes.has_key?(:'property')
        self.property = attributes[:'property']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'dids')
        if (value = attributes[:'dids']).is_a?(Array)
          self.dids = value
        end
      end

      if attributes.has_key?(:'taskParameters')
        self.task_parameters = attributes[:'taskParameters']
      end

      if attributes.has_key?(:'createdOn')
        self.created_on = attributes[:'createdOn']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          filter == o.filter &&
          task_type == o.task_type &&
          modified_on == o.modified_on &&
          dtid == o.dtid &&
          status_counts == o.status_counts &&
          property == o.property &&
          id == o.id &&
          dids == o.dids &&
          task_parameters == o.task_parameters &&
          created_on == o.created_on &&
          status == o.status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [filter, task_type, modified_on, dtid, status_counts, property, id, dids, task_parameters, created_on, status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ArtikCloud.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
