=begin
#ARTIK Cloud API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ArtikCloud
  class WhitelistingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete a vdid from the devicetype whitelist.
    # Delete a vdid from the devicetype whitelist.
    # @param dtid Device Type ID.
    # @param vdid Vendor Device ID.
    # @param [Hash] opts the optional parameters
    # @return [WhitelistEnvelope]
    def delete_vdid(dtid, vdid, opts = {})
      data, _status_code, _headers = delete_vdid_with_http_info(dtid, vdid, opts)
      return data
    end

    # Delete a vdid from the devicetype whitelist.
    # Delete a vdid from the devicetype whitelist.
    # @param dtid Device Type ID.
    # @param vdid Vendor Device ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhitelistEnvelope, Fixnum, Hash)>] WhitelistEnvelope data, response status code and response headers
    def delete_vdid_with_http_info(dtid, vdid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhitelistingApi.delete_vdid ..."
      end
      # verify the required parameter 'dtid' is set
      fail ArgumentError, "Missing the required parameter 'dtid' when calling WhitelistingApi.delete_vdid" if dtid.nil?
      # verify the required parameter 'vdid' is set
      fail ArgumentError, "Missing the required parameter 'vdid' when calling WhitelistingApi.delete_vdid" if vdid.nil?
      # resource path
      local_var_path = "/devicetypes/{dtid}/whitelist/{vdid}".sub('{format}','json').sub('{' + 'dtid' + '}', dtid.to_s).sub('{' + 'vdid' + '}', vdid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WhitelistEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhitelistingApi#delete_vdid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a whitelist certificate associated with a devicetype.
    # Delete a whitelist certificate associated with a devicetype.
    # @param dtid Device Type ID.
    # @param cid Certificate ID.
    # @param [Hash] opts the optional parameters
    # @return [WhitelistEnvelope]
    def delete_whitelist_certificate(dtid, cid, opts = {})
      data, _status_code, _headers = delete_whitelist_certificate_with_http_info(dtid, cid, opts)
      return data
    end

    # Delete a whitelist certificate associated with a devicetype.
    # Delete a whitelist certificate associated with a devicetype.
    # @param dtid Device Type ID.
    # @param cid Certificate ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhitelistEnvelope, Fixnum, Hash)>] WhitelistEnvelope data, response status code and response headers
    def delete_whitelist_certificate_with_http_info(dtid, cid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhitelistingApi.delete_whitelist_certificate ..."
      end
      # verify the required parameter 'dtid' is set
      fail ArgumentError, "Missing the required parameter 'dtid' when calling WhitelistingApi.delete_whitelist_certificate" if dtid.nil?
      # verify the required parameter 'cid' is set
      fail ArgumentError, "Missing the required parameter 'cid' when calling WhitelistingApi.delete_whitelist_certificate" if cid.nil?
      # resource path
      local_var_path = "/devicetypes/{dtid}/whitelist/certificates/{cid}".sub('{format}','json').sub('{' + 'dtid' + '}', dtid.to_s).sub('{' + 'cid' + '}', cid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WhitelistEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhitelistingApi#delete_whitelist_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable or disble whitelist feature of a device type
    # Enable or disble whitelist feature of a device type
    # @param dtid Device Type ID.
    # @param device_type_update_info Device type update input.
    # @param [Hash] opts the optional parameters
    # @return [WhitelistEnvelope]
    def enable_whitelist(dtid, device_type_update_info, opts = {})
      data, _status_code, _headers = enable_whitelist_with_http_info(dtid, device_type_update_info, opts)
      return data
    end

    # Enable or disble whitelist feature of a device type
    # Enable or disble whitelist feature of a device type
    # @param dtid Device Type ID.
    # @param device_type_update_info Device type update input.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhitelistEnvelope, Fixnum, Hash)>] WhitelistEnvelope data, response status code and response headers
    def enable_whitelist_with_http_info(dtid, device_type_update_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhitelistingApi.enable_whitelist ..."
      end
      # verify the required parameter 'dtid' is set
      fail ArgumentError, "Missing the required parameter 'dtid' when calling WhitelistingApi.enable_whitelist" if dtid.nil?
      # verify the required parameter 'device_type_update_info' is set
      fail ArgumentError, "Missing the required parameter 'device_type_update_info' when calling WhitelistingApi.enable_whitelist" if device_type_update_info.nil?
      # resource path
      local_var_path = "/devicetypes/:dtid/whitelist/enable".sub('{format}','json').sub('{' + 'dtid' + '}', dtid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(device_type_update_info)
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WhitelistEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhitelistingApi#enable_whitelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of rejected rows for an uploaded CSV file.
    # Get the list of rejected rows for an uploaded CSV file.
    # @param dtid Device type id related to the uploaded CSV file.
    # @param upload_id Upload id related to the uploaded CSV file.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Max results count.
    # @option opts [Integer] :offset Result starting offset.
    # @return [RejectedCSVRowsEnvelope]
    def get_rejected_row_list(dtid, upload_id, opts = {})
      data, _status_code, _headers = get_rejected_row_list_with_http_info(dtid, upload_id, opts)
      return data
    end

    # Get the list of rejected rows for an uploaded CSV file.
    # Get the list of rejected rows for an uploaded CSV file.
    # @param dtid Device type id related to the uploaded CSV file.
    # @param upload_id Upload id related to the uploaded CSV file.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Max results count.
    # @option opts [Integer] :offset Result starting offset.
    # @return [Array<(RejectedCSVRowsEnvelope, Fixnum, Hash)>] RejectedCSVRowsEnvelope data, response status code and response headers
    def get_rejected_row_list_with_http_info(dtid, upload_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhitelistingApi.get_rejected_row_list ..."
      end
      # verify the required parameter 'dtid' is set
      fail ArgumentError, "Missing the required parameter 'dtid' when calling WhitelistingApi.get_rejected_row_list" if dtid.nil?
      # verify the required parameter 'upload_id' is set
      fail ArgumentError, "Missing the required parameter 'upload_id' when calling WhitelistingApi.get_rejected_row_list" if upload_id.nil?
      # resource path
      local_var_path = "/devicetypes/{dtid}/whitelist/{uploadId}/rejectedRows".sub('{format}','json').sub('{' + 'dtid' + '}', dtid.to_s).sub('{' + 'uploadId' + '}', upload_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RejectedCSVRowsEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhitelistingApi#get_rejected_row_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the status of a uploaded CSV file.
    # Get the status of a uploaded CSV file.
    # @param dtid Device type id related to the uploaded CSV file.
    # @param upload_id Upload id related to the uploaded CSV file.
    # @param [Hash] opts the optional parameters
    # @return [UploadStatusEnvelope]
    def get_upload_status(dtid, upload_id, opts = {})
      data, _status_code, _headers = get_upload_status_with_http_info(dtid, upload_id, opts)
      return data
    end

    # Get the status of a uploaded CSV file.
    # Get the status of a uploaded CSV file.
    # @param dtid Device type id related to the uploaded CSV file.
    # @param upload_id Upload id related to the uploaded CSV file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadStatusEnvelope, Fixnum, Hash)>] UploadStatusEnvelope data, response status code and response headers
    def get_upload_status_with_http_info(dtid, upload_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhitelistingApi.get_upload_status ..."
      end
      # verify the required parameter 'dtid' is set
      fail ArgumentError, "Missing the required parameter 'dtid' when calling WhitelistingApi.get_upload_status" if dtid.nil?
      # verify the required parameter 'upload_id' is set
      fail ArgumentError, "Missing the required parameter 'upload_id' when calling WhitelistingApi.get_upload_status" if upload_id.nil?
      # resource path
      local_var_path = "/devicetypes/{dtid}/whitelist/{uploadId}/status".sub('{format}','json').sub('{' + 'dtid' + '}', dtid.to_s).sub('{' + 'uploadId' + '}', upload_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadStatusEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhitelistingApi#get_upload_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get whitelisted vdids of a device type.
    # Get whitelisted vdids of a device type.
    # @param dtid Device Type ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Max results count.
    # @option opts [Integer] :offset Result starting offset.
    # @return [WhitelistResultEnvelope]
    def get_whitelist(dtid, opts = {})
      data, _status_code, _headers = get_whitelist_with_http_info(dtid, opts)
      return data
    end

    # Get whitelisted vdids of a device type.
    # Get whitelisted vdids of a device type.
    # @param dtid Device Type ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Max results count.
    # @option opts [Integer] :offset Result starting offset.
    # @return [Array<(WhitelistResultEnvelope, Fixnum, Hash)>] WhitelistResultEnvelope data, response status code and response headers
    def get_whitelist_with_http_info(dtid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhitelistingApi.get_whitelist ..."
      end
      # verify the required parameter 'dtid' is set
      fail ArgumentError, "Missing the required parameter 'dtid' when calling WhitelistingApi.get_whitelist" if dtid.nil?
      # resource path
      local_var_path = "/devicetypes/{dtid}/whitelist".sub('{format}','json').sub('{' + 'dtid' + '}', dtid.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WhitelistResultEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhitelistingApi#get_whitelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get whitelist certificate of device type.
    # Get whitelist certificate of device type.
    # @param dtid Device Type ID.
    # @param [Hash] opts the optional parameters
    # @return [CertificateEnvelope]
    def get_whitelist_certificate(dtid, opts = {})
      data, _status_code, _headers = get_whitelist_certificate_with_http_info(dtid, opts)
      return data
    end

    # Get whitelist certificate of device type.
    # Get whitelist certificate of device type.
    # @param dtid Device Type ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateEnvelope, Fixnum, Hash)>] CertificateEnvelope data, response status code and response headers
    def get_whitelist_certificate_with_http_info(dtid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhitelistingApi.get_whitelist_certificate ..."
      end
      # verify the required parameter 'dtid' is set
      fail ArgumentError, "Missing the required parameter 'dtid' when calling WhitelistingApi.get_whitelist_certificate" if dtid.nil?
      # resource path
      local_var_path = "/devicetypes/{dtid}/whitelist/certificates".sub('{format}','json').sub('{' + 'dtid' + '}', dtid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhitelistingApi#get_whitelist_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the status of whitelist feature (enabled/disabled) of a device type.
    # Get the status of whitelist feature (enabled/disabled) of a device type.
    # @param dtid Device Type ID.
    # @param [Hash] opts the optional parameters
    # @return [WhitelistEnvelope]
    def get_whitelist_status(dtid, opts = {})
      data, _status_code, _headers = get_whitelist_status_with_http_info(dtid, opts)
      return data
    end

    # Get the status of whitelist feature (enabled/disabled) of a device type.
    # Get the status of whitelist feature (enabled/disabled) of a device type.
    # @param dtid Device Type ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhitelistEnvelope, Fixnum, Hash)>] WhitelistEnvelope data, response status code and response headers
    def get_whitelist_status_with_http_info(dtid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhitelistingApi.get_whitelist_status ..."
      end
      # verify the required parameter 'dtid' is set
      fail ArgumentError, "Missing the required parameter 'dtid' when calling WhitelistingApi.get_whitelist_status" if dtid.nil?
      # resource path
      local_var_path = "/devicetypes/{dtid}/whitelist/status".sub('{format}','json').sub('{' + 'dtid' + '}', dtid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WhitelistEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhitelistingApi#get_whitelist_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a CSV file related to the Device Type.
    # Upload a CSV file related to the Device Type.
    # @param dtid Device Type ID.
    # @param file Device Type ID.
    # @param [Hash] opts the optional parameters
    # @return [UploadIdEnvelope]
    def upload_csv(dtid, file, opts = {})
      data, _status_code, _headers = upload_csv_with_http_info(dtid, file, opts)
      return data
    end

    # Upload a CSV file related to the Device Type.
    # Upload a CSV file related to the Device Type.
    # @param dtid Device Type ID.
    # @param file Device Type ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadIdEnvelope, Fixnum, Hash)>] UploadIdEnvelope data, response status code and response headers
    def upload_csv_with_http_info(dtid, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WhitelistingApi.upload_csv ..."
      end
      # verify the required parameter 'dtid' is set
      fail ArgumentError, "Missing the required parameter 'dtid' when calling WhitelistingApi.upload_csv" if dtid.nil?
      # verify the required parameter 'file' is set
      fail ArgumentError, "Missing the required parameter 'file' when calling WhitelistingApi.upload_csv" if file.nil?
      # resource path
      local_var_path = "/devicetypes/{dtid}/whitelist".sub('{format}','json').sub('{' + 'dtid' + '}', dtid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(file)
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadIdEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhitelistingApi#upload_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
