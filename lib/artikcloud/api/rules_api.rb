=begin
#ARTIK Cloud API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ArtikCloud
  class RulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Rule
    # Create a new Rule
    # @param rule_info Rule object that needs to be added
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @return [RuleEnvelope]
    def create_rule(rule_info, user_id, opts = {})
      data, _status_code, _headers = create_rule_with_http_info(rule_info, user_id, opts)
      return data
    end

    # Create Rule
    # Create a new Rule
    # @param rule_info Rule object that needs to be added
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(RuleEnvelope, Fixnum, Hash)>] RuleEnvelope data, response status code and response headers
    def create_rule_with_http_info(rule_info, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RulesApi.create_rule ..."
      end
      # verify the required parameter 'rule_info' is set
      fail ArgumentError, "Missing the required parameter 'rule_info' when calling RulesApi.create_rule" if rule_info.nil?
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RulesApi.create_rule" if user_id.nil?
      # resource path
      local_var_path = "/rules".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'userId'] = user_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule_info)
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#create_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Rule
    # Delete a Rule
    # @param rule_id Rule ID.
    # @param [Hash] opts the optional parameters
    # @return [RuleEnvelope]
    def delete_rule(rule_id, opts = {})
      data, _status_code, _headers = delete_rule_with_http_info(rule_id, opts)
      return data
    end

    # Delete Rule
    # Delete a Rule
    # @param rule_id Rule ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RuleEnvelope, Fixnum, Hash)>] RuleEnvelope data, response status code and response headers
    def delete_rule_with_http_info(rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RulesApi.delete_rule ..."
      end
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.delete_rule" if rule_id.nil?
      # resource path
      local_var_path = "/rules/{ruleId}".sub('{format}','json').sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#delete_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Rule
    # Get a rule using the Rule ID
    # @param rule_id Rule ID.
    # @param [Hash] opts the optional parameters
    # @return [RuleEnvelope]
    def get_rule(rule_id, opts = {})
      data, _status_code, _headers = get_rule_with_http_info(rule_id, opts)
      return data
    end

    # Get Rule
    # Get a rule using the Rule ID
    # @param rule_id Rule ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RuleEnvelope, Fixnum, Hash)>] RuleEnvelope data, response status code and response headers
    def get_rule_with_http_info(rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RulesApi.get_rule ..."
      end
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.get_rule" if rule_id.nil?
      # resource path
      local_var_path = "/rules/{ruleId}".sub('{format}','json').sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#get_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Rule
    # Update an existing Rule
    # @param rule_id Rule ID.
    # @param rule_info Rule object that needs to be updated
    # @param [Hash] opts the optional parameters
    # @return [RuleEnvelope]
    def update_rule(rule_id, rule_info, opts = {})
      data, _status_code, _headers = update_rule_with_http_info(rule_id, rule_info, opts)
      return data
    end

    # Update Rule
    # Update an existing Rule
    # @param rule_id Rule ID.
    # @param rule_info Rule object that needs to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(RuleEnvelope, Fixnum, Hash)>] RuleEnvelope data, response status code and response headers
    def update_rule_with_http_info(rule_id, rule_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RulesApi.update_rule ..."
      end
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.update_rule" if rule_id.nil?
      # verify the required parameter 'rule_info' is set
      fail ArgumentError, "Missing the required parameter 'rule_info' when calling RulesApi.update_rule" if rule_info.nil?
      # resource path
      local_var_path = "/rules/{ruleId}".sub('{format}','json').sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule_info)
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#update_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
