=begin
#ARTIK Cloud API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ArtikCloud
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create User Application Properties
    # Create application properties for a user
    # @param user_id User Id
    # @param properties Properties to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :aid Application ID
    # @return [PropertiesEnvelope]
    def create_user_properties(user_id, properties, opts = {})
      data, _status_code, _headers = create_user_properties_with_http_info(user_id, properties, opts)
      return data
    end

    # Create User Application Properties
    # Create application properties for a user
    # @param user_id User Id
    # @param properties Properties to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :aid Application ID
    # @return [Array<(PropertiesEnvelope, Fixnum, Hash)>] PropertiesEnvelope data, response status code and response headers
    def create_user_properties_with_http_info(user_id, properties, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.create_user_properties ..."
      end
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.create_user_properties" if user_id.nil?
      # verify the required parameter 'properties' is set
      fail ArgumentError, "Missing the required parameter 'properties' when calling UsersApi.create_user_properties" if properties.nil?
      # resource path
      local_var_path = "/users/{userId}/properties".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'aid'] = opts[:'aid'] if !opts[:'aid'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(properties)
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PropertiesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_user_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete User Application Properties
    # Deletes a user's application properties
    # @param user_id User Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :aid Application ID
    # @return [PropertiesEnvelope]
    def delete_user_properties(user_id, opts = {})
      data, _status_code, _headers = delete_user_properties_with_http_info(user_id, opts)
      return data
    end

    # Delete User Application Properties
    # Deletes a user&#39;s application properties
    # @param user_id User Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :aid Application ID
    # @return [Array<(PropertiesEnvelope, Fixnum, Hash)>] PropertiesEnvelope data, response status code and response headers
    def delete_user_properties_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.delete_user_properties ..."
      end
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_user_properties" if user_id.nil?
      # resource path
      local_var_path = "/users/{userId}/properties".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'aid'] = opts[:'aid'] if !opts[:'aid'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PropertiesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_user_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Current User Profile
    # Get's the current user's profile
    # @param [Hash] opts the optional parameters
    # @return [UserEnvelope]
    def get_self(opts = {})
      data, _status_code, _headers = get_self_with_http_info(opts)
      return data
    end

    # Get Current User Profile
    # Get&#39;s the current user&#39;s profile
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserEnvelope, Fixnum, Hash)>] UserEnvelope data, response status code and response headers
    def get_self_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.get_self ..."
      end
      # resource path
      local_var_path = "/users/self".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_self\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get User Device Types
    # Retrieve User's Device Types
    # @param user_id User ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [Integer] :count Desired count of items in the result set
    # @option opts [BOOLEAN] :include_shared Optional. Boolean (true/false) - If false, only return the user&#39;s device types. If true, also return device types shared by other users.
    # @return [DeviceTypesEnvelope]
    def get_user_device_types(user_id, opts = {})
      data, _status_code, _headers = get_user_device_types_with_http_info(user_id, opts)
      return data
    end

    # Get User Device Types
    # Retrieve User&#39;s Device Types
    # @param user_id User ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [Integer] :count Desired count of items in the result set
    # @option opts [BOOLEAN] :include_shared Optional. Boolean (true/false) - If false, only return the user&#39;s device types. If true, also return device types shared by other users.
    # @return [Array<(DeviceTypesEnvelope, Fixnum, Hash)>] DeviceTypesEnvelope data, response status code and response headers
    def get_user_device_types_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.get_user_device_types ..."
      end
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.get_user_device_types" if user_id.nil?
      # resource path
      local_var_path = "/users/{userId}/devicetypes".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'includeShared'] = opts[:'include_shared'] if !opts[:'include_shared'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeviceTypesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_device_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get User Devices
    # Retrieve User's Devices
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [Integer] :count Desired count of items in the result set
    # @option opts [BOOLEAN] :include_properties Optional. Boolean (true/false) - If false, only return the user&#39;s device types. If true, also return device types shared by other users.
    # @option opts [String] :owner Return owned and/or shared devices. Default to ALL.
    # @option opts [BOOLEAN] :include_share_info Include share info
    # @option opts [String] :dtid Return only devices of this device type. If empty, assumes all device types allowed by the authorization.
    # @return [DevicesEnvelope]
    def get_user_devices(user_id, opts = {})
      data, _status_code, _headers = get_user_devices_with_http_info(user_id, opts)
      return data
    end

    # Get User Devices
    # Retrieve User&#39;s Devices
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [Integer] :count Desired count of items in the result set
    # @option opts [BOOLEAN] :include_properties Optional. Boolean (true/false) - If false, only return the user&#39;s device types. If true, also return device types shared by other users.
    # @option opts [String] :owner Return owned and/or shared devices. Default to ALL.
    # @option opts [BOOLEAN] :include_share_info Include share info
    # @option opts [String] :dtid Return only devices of this device type. If empty, assumes all device types allowed by the authorization.
    # @return [Array<(DevicesEnvelope, Fixnum, Hash)>] DevicesEnvelope data, response status code and response headers
    def get_user_devices_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.get_user_devices ..."
      end
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.get_user_devices" if user_id.nil?
      # resource path
      local_var_path = "/users/{userId}/devices".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'includeProperties'] = opts[:'include_properties'] if !opts[:'include_properties'].nil?
      query_params[:'owner'] = opts[:'owner'] if !opts[:'owner'].nil?
      query_params[:'includeShareInfo'] = opts[:'include_share_info'] if !opts[:'include_share_info'].nil?
      query_params[:'dtid'] = opts[:'dtid'] if !opts[:'dtid'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DevicesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get User application properties
    # Get application properties of a user
    # @param user_id User Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :aid Application ID
    # @return [PropertiesEnvelope]
    def get_user_properties(user_id, opts = {})
      data, _status_code, _headers = get_user_properties_with_http_info(user_id, opts)
      return data
    end

    # Get User application properties
    # Get application properties of a user
    # @param user_id User Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :aid Application ID
    # @return [Array<(PropertiesEnvelope, Fixnum, Hash)>] PropertiesEnvelope data, response status code and response headers
    def get_user_properties_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.get_user_properties ..."
      end
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.get_user_properties" if user_id.nil?
      # resource path
      local_var_path = "/users/{userId}/properties".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'aid'] = opts[:'aid'] if !opts[:'aid'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PropertiesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get User Rules
    # Retrieve User's Rules
    # @param user_id User ID.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :exclude_disabled Exclude disabled rules in the result.
    # @option opts [Integer] :count Desired count of items in the result set.
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [String] :owner Rule owner
    # @return [RulesEnvelope]
    def get_user_rules(user_id, opts = {})
      data, _status_code, _headers = get_user_rules_with_http_info(user_id, opts)
      return data
    end

    # Get User Rules
    # Retrieve User&#39;s Rules
    # @param user_id User ID.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :exclude_disabled Exclude disabled rules in the result.
    # @option opts [Integer] :count Desired count of items in the result set.
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [String] :owner Rule owner
    # @return [Array<(RulesEnvelope, Fixnum, Hash)>] RulesEnvelope data, response status code and response headers
    def get_user_rules_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.get_user_rules ..."
      end
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.get_user_rules" if user_id.nil?
      if opts[:'owner'] && !['user', 'application', 'all'].include?(opts[:'owner'])
        fail ArgumentError, 'invalid value for "owner", must be one of user, application, all'
      end
      # resource path
      local_var_path = "/users/{userId}/rules".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'excludeDisabled'] = opts[:'exclude_disabled'] if !opts[:'exclude_disabled'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'owner'] = opts[:'owner'] if !opts[:'owner'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RulesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get User shares
    # Get User shares
    # @param user_id User ID.
    # @param filter filter
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Desired count of items in the result set.
    # @option opts [Integer] :offset Offset for pagination.
    # @return [DeviceSharingEnvelope]
    def list_all_shares_for_user(user_id, filter, opts = {})
      data, _status_code, _headers = list_all_shares_for_user_with_http_info(user_id, filter, opts)
      return data
    end

    # Get User shares
    # Get User shares
    # @param user_id User ID.
    # @param filter filter
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Desired count of items in the result set.
    # @option opts [Integer] :offset Offset for pagination.
    # @return [Array<(DeviceSharingEnvelope, Fixnum, Hash)>] DeviceSharingEnvelope data, response status code and response headers
    def list_all_shares_for_user_with_http_info(user_id, filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.list_all_shares_for_user ..."
      end
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.list_all_shares_for_user" if user_id.nil?
      # verify the required parameter 'filter' is set
      fail ArgumentError, "Missing the required parameter 'filter' when calling UsersApi.list_all_shares_for_user" if filter.nil?
      # resource path
      local_var_path = "/users/{userId}/shares".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = filter
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeviceSharingEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#list_all_shares_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update User Application Properties
    # Updates application properties of a user
    # @param user_id User Id
    # @param properties Properties to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :aid Application ID
    # @return [PropertiesEnvelope]
    def update_user_properties(user_id, properties, opts = {})
      data, _status_code, _headers = update_user_properties_with_http_info(user_id, properties, opts)
      return data
    end

    # Update User Application Properties
    # Updates application properties of a user
    # @param user_id User Id
    # @param properties Properties to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :aid Application ID
    # @return [Array<(PropertiesEnvelope, Fixnum, Hash)>] PropertiesEnvelope data, response status code and response headers
    def update_user_properties_with_http_info(user_id, properties, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsersApi.update_user_properties ..."
      end
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.update_user_properties" if user_id.nil?
      # verify the required parameter 'properties' is set
      fail ArgumentError, "Missing the required parameter 'properties' when calling UsersApi.update_user_properties" if properties.nil?
      # resource path
      local_var_path = "/users/{userId}/properties".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'aid'] = opts[:'aid'] if !opts[:'aid'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(properties)
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PropertiesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
