=begin
#ARTIK Cloud API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ArtikCloud
  class DeviceTypesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get Available Manifest Versions
    # Get a Device Type's available manifest versions
    # @param device_type_id deviceTypeId
    # @param [Hash] opts the optional parameters
    # @return [ManifestVersionsEnvelope]
    def get_available_manifest_versions(device_type_id, opts = {})
      data, _status_code, _headers = get_available_manifest_versions_with_http_info(device_type_id, opts)
      return data
    end

    # Get Available Manifest Versions
    # Get a Device Type&#39;s available manifest versions
    # @param device_type_id deviceTypeId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManifestVersionsEnvelope, Fixnum, Hash)>] ManifestVersionsEnvelope data, response status code and response headers
    def get_available_manifest_versions_with_http_info(device_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DeviceTypesApi.get_available_manifest_versions ..."
      end
      # verify the required parameter 'device_type_id' is set
      fail ArgumentError, "Missing the required parameter 'device_type_id' when calling DeviceTypesApi.get_available_manifest_versions" if device_type_id.nil?
      # resource path
      local_var_path = "/devicetypes/{deviceTypeId}/availablemanifestversions".sub('{format}','json').sub('{' + 'deviceTypeId' + '}', device_type_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ManifestVersionsEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceTypesApi#get_available_manifest_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Device Type
    # Retrieves a Device Type
    # @param device_type_id deviceTypeId
    # @param [Hash] opts the optional parameters
    # @return [DeviceTypeEnvelope]
    def get_device_type(device_type_id, opts = {})
      data, _status_code, _headers = get_device_type_with_http_info(device_type_id, opts)
      return data
    end

    # Get Device Type
    # Retrieves a Device Type
    # @param device_type_id deviceTypeId
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceTypeEnvelope, Fixnum, Hash)>] DeviceTypeEnvelope data, response status code and response headers
    def get_device_type_with_http_info(device_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DeviceTypesApi.get_device_type ..."
      end
      # verify the required parameter 'device_type_id' is set
      fail ArgumentError, "Missing the required parameter 'device_type_id' when calling DeviceTypesApi.get_device_type" if device_type_id.nil?
      # resource path
      local_var_path = "/devicetypes/{deviceTypeId}".sub('{format}','json').sub('{' + 'deviceTypeId' + '}', device_type_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeviceTypeEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceTypesApi#get_device_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Device Types
    # Retrieves Device Types
    # @param name Device Type name
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [Integer] :count Desired count of items in the result set
    # @option opts [String] :tags Elements tagged with the list of tags. (comma separated)
    # @return [DeviceTypesEnvelope]
    def get_device_types(name, opts = {})
      data, _status_code, _headers = get_device_types_with_http_info(name, opts)
      return data
    end

    # Get Device Types
    # Retrieves Device Types
    # @param name Device Type name
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [Integer] :count Desired count of items in the result set
    # @option opts [String] :tags Elements tagged with the list of tags. (comma separated)
    # @return [Array<(DeviceTypesEnvelope, Fixnum, Hash)>] DeviceTypesEnvelope data, response status code and response headers
    def get_device_types_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DeviceTypesApi.get_device_types ..."
      end
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling DeviceTypesApi.get_device_types" if name.nil?
      # resource path
      local_var_path = "/devicetypes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeviceTypesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceTypesApi#get_device_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Device Types by Application
    # Get Device Types by Application
    # @param app_id Application ID.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :product_info Flag to include the associated ProductInfo if present
    # @option opts [Integer] :count Desired count of items in the result set.
    # @option opts [Integer] :offset Offset for pagination.
    # @return [DeviceTypesEnvelope]
    def get_device_types_by_application(app_id, opts = {})
      data, _status_code, _headers = get_device_types_by_application_with_http_info(app_id, opts)
      return data
    end

    # Get Device Types by Application
    # Get Device Types by Application
    # @param app_id Application ID.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :product_info Flag to include the associated ProductInfo if present
    # @option opts [Integer] :count Desired count of items in the result set.
    # @option opts [Integer] :offset Offset for pagination.
    # @return [Array<(DeviceTypesEnvelope, Fixnum, Hash)>] DeviceTypesEnvelope data, response status code and response headers
    def get_device_types_by_application_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DeviceTypesApi.get_device_types_by_application ..."
      end
      # verify the required parameter 'app_id' is set
      fail ArgumentError, "Missing the required parameter 'app_id' when calling DeviceTypesApi.get_device_types_by_application" if app_id.nil?
      # resource path
      local_var_path = "/applications/{appId}/devicetypes".sub('{format}','json').sub('{' + 'appId' + '}', app_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'productInfo'] = opts[:'product_info'] if !opts[:'product_info'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeviceTypesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceTypesApi#get_device_types_by_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Latest Manifest Properties
    # Get a Device Type's manifest properties for the latest version.
    # @param device_type_id Device Type ID.
    # @param [Hash] opts the optional parameters
    # @return [ManifestPropertiesEnvelope]
    def get_latest_manifest_properties(device_type_id, opts = {})
      data, _status_code, _headers = get_latest_manifest_properties_with_http_info(device_type_id, opts)
      return data
    end

    # Get Latest Manifest Properties
    # Get a Device Type&#39;s manifest properties for the latest version.
    # @param device_type_id Device Type ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManifestPropertiesEnvelope, Fixnum, Hash)>] ManifestPropertiesEnvelope data, response status code and response headers
    def get_latest_manifest_properties_with_http_info(device_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DeviceTypesApi.get_latest_manifest_properties ..."
      end
      # verify the required parameter 'device_type_id' is set
      fail ArgumentError, "Missing the required parameter 'device_type_id' when calling DeviceTypesApi.get_latest_manifest_properties" if device_type_id.nil?
      # resource path
      local_var_path = "/devicetypes/{deviceTypeId}/manifests/latest/properties".sub('{format}','json').sub('{' + 'deviceTypeId' + '}', device_type_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ManifestPropertiesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceTypesApi#get_latest_manifest_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get manifest properties
    # Get a Device Type's manifest properties for a specific version.
    # @param device_type_id Device Type ID.
    # @param version Manifest Version.
    # @param [Hash] opts the optional parameters
    # @return [ManifestPropertiesEnvelope]
    def get_manifest_properties(device_type_id, version, opts = {})
      data, _status_code, _headers = get_manifest_properties_with_http_info(device_type_id, version, opts)
      return data
    end

    # Get manifest properties
    # Get a Device Type&#39;s manifest properties for a specific version.
    # @param device_type_id Device Type ID.
    # @param version Manifest Version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManifestPropertiesEnvelope, Fixnum, Hash)>] ManifestPropertiesEnvelope data, response status code and response headers
    def get_manifest_properties_with_http_info(device_type_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DeviceTypesApi.get_manifest_properties ..."
      end
      # verify the required parameter 'device_type_id' is set
      fail ArgumentError, "Missing the required parameter 'device_type_id' when calling DeviceTypesApi.get_manifest_properties" if device_type_id.nil?
      # verify the required parameter 'version' is set
      fail ArgumentError, "Missing the required parameter 'version' when calling DeviceTypesApi.get_manifest_properties" if version.nil?
      # resource path
      local_var_path = "/devicetypes/{deviceTypeId}/manifests/{version}/properties".sub('{format}','json').sub('{' + 'deviceTypeId' + '}', device_type_id.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ManifestPropertiesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceTypesApi#get_manifest_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
