=begin
#ARTIK Cloud API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ArtikCloud
  class TokensApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Check Token
    # (Deprecated) Check Token. See tokenInfo
    # @param token_info Token object to be checked
    # @param [Hash] opts the optional parameters
    # @return [CheckTokenResponse]
    def check_token(token_info, opts = {})
      data, _status_code, _headers = check_token_with_http_info(token_info, opts)
      return data
    end

    # Check Token
    # (Deprecated) Check Token. See tokenInfo
    # @param token_info Token object to be checked
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckTokenResponse, Fixnum, Hash)>] CheckTokenResponse data, response status code and response headers
    def check_token_with_http_info(token_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokensApi.check_token ..."
      end
      # verify the required parameter 'token_info' is set
      fail ArgumentError, "Missing the required parameter 'token_info' when calling TokensApi.check_token" if token_info.nil?
      # resource path
      local_var_path = "/accounts/checkToken".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(token_info)
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CheckTokenResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#check_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh Token
    # Refresh Token
    # @param grant_type Grant Type.
    # @param refresh_token Refresh Token.
    # @param [Hash] opts the optional parameters
    # @return [RefreshTokenResponse]
    def refresh_token(grant_type, refresh_token, opts = {})
      data, _status_code, _headers = refresh_token_with_http_info(grant_type, refresh_token, opts)
      return data
    end

    # Refresh Token
    # Refresh Token
    # @param grant_type Grant Type.
    # @param refresh_token Refresh Token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RefreshTokenResponse, Fixnum, Hash)>] RefreshTokenResponse data, response status code and response headers
    def refresh_token_with_http_info(grant_type, refresh_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokensApi.refresh_token ..."
      end
      # verify the required parameter 'grant_type' is set
      fail ArgumentError, "Missing the required parameter 'grant_type' when calling TokensApi.refresh_token" if grant_type.nil?
      # verify the required parameter 'refresh_token' is set
      fail ArgumentError, "Missing the required parameter 'refresh_token' when calling TokensApi.refresh_token" if refresh_token.nil?
      # resource path
      local_var_path = "/accounts/token".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["grant_type"] = grant_type
      form_params["refresh_token"] = refresh_token

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RefreshTokenResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#refresh_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Token Info
    # Returns the Token Information
    # @param [Hash] opts the optional parameters
    # @return [TokenInfoSuccessResponse]
    def token_info(opts = {})
      data, _status_code, _headers = token_info_with_http_info(opts)
      return data
    end

    # Token Info
    # Returns the Token Information
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenInfoSuccessResponse, Fixnum, Hash)>] TokenInfoSuccessResponse data, response status code and response headers
    def token_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokensApi.token_info ..."
      end
      # resource path
      local_var_path = "/accounts/tokenInfo".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenInfoSuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#token_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
