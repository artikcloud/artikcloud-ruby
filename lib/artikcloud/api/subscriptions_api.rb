=begin
#ARTIK Cloud API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ArtikCloud
  class SubscriptionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Subscription
    # Create Subscription
    # @param subscription_info Subscription details
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionEnvelope]
    def create_subscription(subscription_info, opts = {})
      data, _status_code, _headers = create_subscription_with_http_info(subscription_info, opts)
      return data
    end

    # Create Subscription
    # Create Subscription
    # @param subscription_info Subscription details
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionEnvelope, Fixnum, Hash)>] SubscriptionEnvelope data, response status code and response headers
    def create_subscription_with_http_info(subscription_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.create_subscription ..."
      end
      # verify the required parameter 'subscription_info' is set
      fail ArgumentError, "Missing the required parameter 'subscription_info' when calling SubscriptionsApi.create_subscription" if subscription_info.nil?
      # resource path
      local_var_path = "/subscriptions".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(subscription_info)
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#create_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Subscription
    # Delete Subscription
    # @param sub_id Subscription ID.
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionEnvelope]
    def delete_subscription(sub_id, opts = {})
      data, _status_code, _headers = delete_subscription_with_http_info(sub_id, opts)
      return data
    end

    # Delete Subscription
    # Delete Subscription
    # @param sub_id Subscription ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionEnvelope, Fixnum, Hash)>] SubscriptionEnvelope data, response status code and response headers
    def delete_subscription_with_http_info(sub_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.delete_subscription ..."
      end
      # verify the required parameter 'sub_id' is set
      fail ArgumentError, "Missing the required parameter 'sub_id' when calling SubscriptionsApi.delete_subscription" if sub_id.nil?
      # resource path
      local_var_path = "/subscriptions/{subId}".sub('{format}','json').sub('{' + 'subId' + '}', sub_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#delete_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Subscriptions
    # Get All Subscriptions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uid User ID
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [Integer] :count Desired count of items in the result set.
    # @return [SubscriptionsEnvelope]
    def get_all_subscriptions(opts = {})
      data, _status_code, _headers = get_all_subscriptions_with_http_info(opts)
      return data
    end

    # Get All Subscriptions
    # Get All Subscriptions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uid User ID
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [Integer] :count Desired count of items in the result set.
    # @return [Array<(SubscriptionsEnvelope, Fixnum, Hash)>] SubscriptionsEnvelope data, response status code and response headers
    def get_all_subscriptions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.get_all_subscriptions ..."
      end
      # resource path
      local_var_path = "/subscriptions".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionsEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#get_all_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Messages
    # Get Messages
    # @param notif_id Notification ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [Integer] :count Desired count of items in the result set.
    # @option opts [String] :order Sort order of results by ts. Either &#39;asc&#39; or &#39;desc&#39;.
    # @return [NotifMessagesResponse]
    def get_messages(notif_id, opts = {})
      data, _status_code, _headers = get_messages_with_http_info(notif_id, opts)
      return data
    end

    # Get Messages
    # Get Messages
    # @param notif_id Notification ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [Integer] :count Desired count of items in the result set.
    # @option opts [String] :order Sort order of results by ts. Either &#39;asc&#39; or &#39;desc&#39;.
    # @return [Array<(NotifMessagesResponse, Fixnum, Hash)>] NotifMessagesResponse data, response status code and response headers
    def get_messages_with_http_info(notif_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.get_messages ..."
      end
      # verify the required parameter 'notif_id' is set
      fail ArgumentError, "Missing the required parameter 'notif_id' when calling SubscriptionsApi.get_messages" if notif_id.nil?
      # resource path
      local_var_path = "/notifications/{notifId}/messages".sub('{format}','json').sub('{' + 'notifId' + '}', notif_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotifMessagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#get_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Subscription
    # Get Subscription
    # @param sub_id Subscription ID.
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionEnvelope]
    def get_subscription(sub_id, opts = {})
      data, _status_code, _headers = get_subscription_with_http_info(sub_id, opts)
      return data
    end

    # Get Subscription
    # Get Subscription
    # @param sub_id Subscription ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionEnvelope, Fixnum, Hash)>] SubscriptionEnvelope data, response status code and response headers
    def get_subscription_with_http_info(sub_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.get_subscription ..."
      end
      # verify the required parameter 'sub_id' is set
      fail ArgumentError, "Missing the required parameter 'sub_id' when calling SubscriptionsApi.get_subscription" if sub_id.nil?
      # resource path
      local_var_path = "/subscriptions/{subId}".sub('{format}','json').sub('{' + 'subId' + '}', sub_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#get_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate Subscription
    # Validate Subscription
    # @param sub_id Subscription ID.
    # @param validation_callback_request Subscription validation callback request
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionEnvelope]
    def validate_subscription(sub_id, validation_callback_request, opts = {})
      data, _status_code, _headers = validate_subscription_with_http_info(sub_id, validation_callback_request, opts)
      return data
    end

    # Validate Subscription
    # Validate Subscription
    # @param sub_id Subscription ID.
    # @param validation_callback_request Subscription validation callback request
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionEnvelope, Fixnum, Hash)>] SubscriptionEnvelope data, response status code and response headers
    def validate_subscription_with_http_info(sub_id, validation_callback_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.validate_subscription ..."
      end
      # verify the required parameter 'sub_id' is set
      fail ArgumentError, "Missing the required parameter 'sub_id' when calling SubscriptionsApi.validate_subscription" if sub_id.nil?
      # verify the required parameter 'validation_callback_request' is set
      fail ArgumentError, "Missing the required parameter 'validation_callback_request' when calling SubscriptionsApi.validate_subscription" if validation_callback_request.nil?
      # resource path
      local_var_path = "/subscriptions/{subId}/validate".sub('{format}','json').sub('{' + 'subId' + '}', sub_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(validation_callback_request)
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#validate_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
