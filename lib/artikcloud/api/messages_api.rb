=begin
#ARTIK Cloud API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module ArtikCloud
  class MessagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get Normalized Message Histogram
    # Get Histogram on normalized messages.
    # @param start_date Timestamp of earliest message (in milliseconds since epoch).
    # @param end_date Timestamp of latest message (in milliseconds since epoch).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sdid Source device ID of the messages being searched.
    # @option opts [String] :field Message field being queried for building histogram.
    # @option opts [String] :interval Interval of time for building histogram blocks. (Valid values: minute, hour, day, month, year)
    # @return [AggregatesHistogramResponse]
    def get_aggregates_histogram(start_date, end_date, opts = {})
      data, _status_code, _headers = get_aggregates_histogram_with_http_info(start_date, end_date, opts)
      return data
    end

    # Get Normalized Message Histogram
    # Get Histogram on normalized messages.
    # @param start_date Timestamp of earliest message (in milliseconds since epoch).
    # @param end_date Timestamp of latest message (in milliseconds since epoch).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sdid Source device ID of the messages being searched.
    # @option opts [String] :field Message field being queried for building histogram.
    # @option opts [String] :interval Interval of time for building histogram blocks. (Valid values: minute, hour, day, month, year)
    # @return [Array<(AggregatesHistogramResponse, Fixnum, Hash)>] AggregatesHistogramResponse data, response status code and response headers
    def get_aggregates_histogram_with_http_info(start_date, end_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.get_aggregates_histogram ..."
      end
      # verify the required parameter 'start_date' is set
      fail ArgumentError, "Missing the required parameter 'start_date' when calling MessagesApi.get_aggregates_histogram" if start_date.nil?
      # verify the required parameter 'end_date' is set
      fail ArgumentError, "Missing the required parameter 'end_date' when calling MessagesApi.get_aggregates_histogram" if end_date.nil?
      # resource path
      local_var_path = "/messages/analytics/histogram".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'startDate'] = start_date
      query_params[:'endDate'] = end_date
      query_params[:'sdid'] = opts[:'sdid'] if !opts[:'sdid'].nil?
      query_params[:'field'] = opts[:'field'] if !opts[:'field'].nil?
      query_params[:'interval'] = opts[:'interval'] if !opts[:'interval'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatesHistogramResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#get_aggregates_histogram\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get normalized message presence
    # Get normalized message presence.
    # @param start_date startDate
    # @param end_date endDate
    # @param interval String representing grouping interval. One of: &#39;minute&#39; (1 hour limit), &#39;hour&#39; (1 day limit), &#39;day&#39; (31 days limit), &#39;month&#39; (1 year limit), or &#39;year&#39; (10 years limit).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sdid Source device ID of the messages being searched.
    # @option opts [String] :field_presence String representing a field from the specified device ID.
    # @return [FieldPresenceEnvelope]
    def get_field_presence(start_date, end_date, interval, opts = {})
      data, _status_code, _headers = get_field_presence_with_http_info(start_date, end_date, interval, opts)
      return data
    end

    # Get normalized message presence
    # Get normalized message presence.
    # @param start_date startDate
    # @param end_date endDate
    # @param interval String representing grouping interval. One of: &#39;minute&#39; (1 hour limit), &#39;hour&#39; (1 day limit), &#39;day&#39; (31 days limit), &#39;month&#39; (1 year limit), or &#39;year&#39; (10 years limit).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sdid Source device ID of the messages being searched.
    # @option opts [String] :field_presence String representing a field from the specified device ID.
    # @return [Array<(FieldPresenceEnvelope, Fixnum, Hash)>] FieldPresenceEnvelope data, response status code and response headers
    def get_field_presence_with_http_info(start_date, end_date, interval, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.get_field_presence ..."
      end
      # verify the required parameter 'start_date' is set
      fail ArgumentError, "Missing the required parameter 'start_date' when calling MessagesApi.get_field_presence" if start_date.nil?
      # verify the required parameter 'end_date' is set
      fail ArgumentError, "Missing the required parameter 'end_date' when calling MessagesApi.get_field_presence" if end_date.nil?
      # verify the required parameter 'interval' is set
      fail ArgumentError, "Missing the required parameter 'interval' when calling MessagesApi.get_field_presence" if interval.nil?
      # resource path
      local_var_path = "/messages/presence".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'startDate'] = start_date
      query_params[:'endDate'] = end_date
      query_params[:'interval'] = interval
      query_params[:'sdid'] = opts[:'sdid'] if !opts[:'sdid'].nil?
      query_params[:'fieldPresence'] = opts[:'field_presence'] if !opts[:'field_presence'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FieldPresenceEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#get_field_presence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Last Normalized Message
    # Get last messages normalized.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of items to return per query.
    # @option opts [String] :sdids Comma separated list of source device IDs (minimum: 1).
    # @option opts [String] :field_presence String representing a field from the specified device ID.
    # @return [NormalizedMessagesEnvelope]
    def get_last_normalized_messages(opts = {})
      data, _status_code, _headers = get_last_normalized_messages_with_http_info(opts)
      return data
    end

    # Get Last Normalized Message
    # Get last messages normalized.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of items to return per query.
    # @option opts [String] :sdids Comma separated list of source device IDs (minimum: 1).
    # @option opts [String] :field_presence String representing a field from the specified device ID.
    # @return [Array<(NormalizedMessagesEnvelope, Fixnum, Hash)>] NormalizedMessagesEnvelope data, response status code and response headers
    def get_last_normalized_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.get_last_normalized_messages ..."
      end
      # resource path
      local_var_path = "/messages/last".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sdids'] = opts[:'sdids'] if !opts[:'sdids'].nil?
      query_params[:'fieldPresence'] = opts[:'field_presence'] if !opts[:'field_presence'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NormalizedMessagesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#get_last_normalized_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Normalized Message Aggregates
    # Get Aggregates on normalized messages.
    # @param sdid Source device ID of the messages being searched.
    # @param field Message field being queried for aggregates.
    # @param start_date Timestamp of earliest message (in milliseconds since epoch).
    # @param end_date Timestamp of latest message (in milliseconds since epoch).
    # @param [Hash] opts the optional parameters
    # @return [AggregatesResponse]
    def get_message_aggregates(sdid, field, start_date, end_date, opts = {})
      data, _status_code, _headers = get_message_aggregates_with_http_info(sdid, field, start_date, end_date, opts)
      return data
    end

    # Get Normalized Message Aggregates
    # Get Aggregates on normalized messages.
    # @param sdid Source device ID of the messages being searched.
    # @param field Message field being queried for aggregates.
    # @param start_date Timestamp of earliest message (in milliseconds since epoch).
    # @param end_date Timestamp of latest message (in milliseconds since epoch).
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregatesResponse, Fixnum, Hash)>] AggregatesResponse data, response status code and response headers
    def get_message_aggregates_with_http_info(sdid, field, start_date, end_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.get_message_aggregates ..."
      end
      # verify the required parameter 'sdid' is set
      fail ArgumentError, "Missing the required parameter 'sdid' when calling MessagesApi.get_message_aggregates" if sdid.nil?
      # verify the required parameter 'field' is set
      fail ArgumentError, "Missing the required parameter 'field' when calling MessagesApi.get_message_aggregates" if field.nil?
      # verify the required parameter 'start_date' is set
      fail ArgumentError, "Missing the required parameter 'start_date' when calling MessagesApi.get_message_aggregates" if start_date.nil?
      # verify the required parameter 'end_date' is set
      fail ArgumentError, "Missing the required parameter 'end_date' when calling MessagesApi.get_message_aggregates" if end_date.nil?
      # resource path
      local_var_path = "/messages/analytics/aggregates".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sdid'] = sdid
      query_params[:'field'] = field
      query_params[:'startDate'] = start_date
      query_params[:'endDate'] = end_date

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#get_message_aggregates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Message Snapshots
    # Get message snapshots.
    # @param sdids Device IDs for which the snapshots are requested. Max 100 device ids per call.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_timestamp Indicates whether to return timestamps of the last update for each field.
    # @return [SnapshotResponses]
    def get_message_snapshots(sdids, opts = {})
      data, _status_code, _headers = get_message_snapshots_with_http_info(sdids, opts)
      return data
    end

    # Get Message Snapshots
    # Get message snapshots.
    # @param sdids Device IDs for which the snapshots are requested. Max 100 device ids per call.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_timestamp Indicates whether to return timestamps of the last update for each field.
    # @return [Array<(SnapshotResponses, Fixnum, Hash)>] SnapshotResponses data, response status code and response headers
    def get_message_snapshots_with_http_info(sdids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.get_message_snapshots ..."
      end
      # verify the required parameter 'sdids' is set
      fail ArgumentError, "Missing the required parameter 'sdids' when calling MessagesApi.get_message_snapshots" if sdids.nil?
      # resource path
      local_var_path = "/messages/snapshots".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sdids'] = sdids
      query_params[:'includeTimestamp'] = opts[:'include_timestamp'] if !opts[:'include_timestamp'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SnapshotResponses')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#get_message_snapshots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Normalized Actions
    # Get the actions normalized
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uid User ID. If not specified, assume that of the current authenticated user. If specified, it must be that of a user for which the current authenticated user has read access to.
    # @option opts [String] :ddid Destination device ID of the actions being searched.
    # @option opts [String] :mid The message ID being searched.
    # @option opts [String] :offset A string that represents the starting item, should be the value of &#39;next&#39; field received in the last response. (required for pagination)
    # @option opts [Integer] :count count
    # @option opts [Integer] :start_date startDate
    # @option opts [Integer] :end_date endDate
    # @option opts [String] :order Desired sort order: &#39;asc&#39; or &#39;desc&#39;
    # @return [NormalizedActionsEnvelope]
    def get_normalized_actions(opts = {})
      data, _status_code, _headers = get_normalized_actions_with_http_info(opts)
      return data
    end

    # Get Normalized Actions
    # Get the actions normalized
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uid User ID. If not specified, assume that of the current authenticated user. If specified, it must be that of a user for which the current authenticated user has read access to.
    # @option opts [String] :ddid Destination device ID of the actions being searched.
    # @option opts [String] :mid The message ID being searched.
    # @option opts [String] :offset A string that represents the starting item, should be the value of &#39;next&#39; field received in the last response. (required for pagination)
    # @option opts [Integer] :count count
    # @option opts [Integer] :start_date startDate
    # @option opts [Integer] :end_date endDate
    # @option opts [String] :order Desired sort order: &#39;asc&#39; or &#39;desc&#39;
    # @return [Array<(NormalizedActionsEnvelope, Fixnum, Hash)>] NormalizedActionsEnvelope data, response status code and response headers
    def get_normalized_actions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.get_normalized_actions ..."
      end
      # resource path
      local_var_path = "/actions".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?
      query_params[:'ddid'] = opts[:'ddid'] if !opts[:'ddid'].nil?
      query_params[:'mid'] = opts[:'mid'] if !opts[:'mid'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NormalizedActionsEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#get_normalized_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Normalized Messages
    # Get the messages normalized
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uid User ID. If not specified, assume that of the current authenticated user. If specified, it must be that of a user for which the current authenticated user has read access to.
    # @option opts [String] :sdid Source device ID of the messages being searched.
    # @option opts [String] :mid The message ID being searched.
    # @option opts [String] :field_presence String representing a field from the specified device ID.
    # @option opts [String] :filter Filter.
    # @option opts [String] :offset A string that represents the starting item, should be the value of &#39;next&#39; field received in the last response. (required for pagination)
    # @option opts [Integer] :count count
    # @option opts [Integer] :start_date startDate
    # @option opts [Integer] :end_date endDate
    # @option opts [String] :order Desired sort order: &#39;asc&#39; or &#39;desc&#39;
    # @return [NormalizedMessagesEnvelope]
    def get_normalized_messages(opts = {})
      data, _status_code, _headers = get_normalized_messages_with_http_info(opts)
      return data
    end

    # Get Normalized Messages
    # Get the messages normalized
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uid User ID. If not specified, assume that of the current authenticated user. If specified, it must be that of a user for which the current authenticated user has read access to.
    # @option opts [String] :sdid Source device ID of the messages being searched.
    # @option opts [String] :mid The message ID being searched.
    # @option opts [String] :field_presence String representing a field from the specified device ID.
    # @option opts [String] :filter Filter.
    # @option opts [String] :offset A string that represents the starting item, should be the value of &#39;next&#39; field received in the last response. (required for pagination)
    # @option opts [Integer] :count count
    # @option opts [Integer] :start_date startDate
    # @option opts [Integer] :end_date endDate
    # @option opts [String] :order Desired sort order: &#39;asc&#39; or &#39;desc&#39;
    # @return [Array<(NormalizedMessagesEnvelope, Fixnum, Hash)>] NormalizedMessagesEnvelope data, response status code and response headers
    def get_normalized_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.get_normalized_messages ..."
      end
      # resource path
      local_var_path = "/messages".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?
      query_params[:'sdid'] = opts[:'sdid'] if !opts[:'sdid'].nil?
      query_params[:'mid'] = opts[:'mid'] if !opts[:'mid'].nil?
      query_params[:'fieldPresence'] = opts[:'field_presence'] if !opts[:'field_presence'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NormalizedMessagesEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#get_normalized_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send Actions
    # Send Actions
    # @param data Actions that are passed in the body
    # @param [Hash] opts the optional parameters
    # @return [MessageIDEnvelope]
    def send_actions(data, opts = {})
      data, _status_code, _headers = send_actions_with_http_info(data, opts)
      return data
    end

    # Send Actions
    # Send Actions
    # @param data Actions that are passed in the body
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageIDEnvelope, Fixnum, Hash)>] MessageIDEnvelope data, response status code and response headers
    def send_actions_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.send_actions ..."
      end
      # verify the required parameter 'data' is set
      fail ArgumentError, "Missing the required parameter 'data' when calling MessagesApi.send_actions" if data.nil?
      # resource path
      local_var_path = "/actions".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(data)
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageIDEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#send_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send Message
    # Send a message
    # @param data Message object that is passed in the body
    # @param [Hash] opts the optional parameters
    # @return [MessageIDEnvelope]
    def send_message(data, opts = {})
      data, _status_code, _headers = send_message_with_http_info(data, opts)
      return data
    end

    # Send Message
    # Send a message
    # @param data Message object that is passed in the body
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageIDEnvelope, Fixnum, Hash)>] MessageIDEnvelope data, response status code and response headers
    def send_message_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.send_message ..."
      end
      # verify the required parameter 'data' is set
      fail ArgumentError, "Missing the required parameter 'data' when calling MessagesApi.send_message" if data.nil?
      # resource path
      local_var_path = "/messages".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(data)
      auth_names = ['artikcloud_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageIDEnvelope')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#send_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
