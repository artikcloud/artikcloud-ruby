=begin
Artik Cloud API

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

License: MIT
http://en.wikipedia.org/wiki/MIT_License

Terms of Service: http://www.samsung.com/global/business/mobile/info/terms-and-conditions.html

=end

require 'spec_helper'
require 'json'

# Unit tests for ArtikCloud::MessagesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'MessagesApi' do
  before do
    # run before each test
    @instance = ArtikCloud::MessagesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MessagesApi' do
    it 'should create an instact of MessagesApi' do
      expect(@instance).to be_instance_of(ArtikCloud::MessagesApi)
    end
  end

  # unit tests for get_aggregates_histogram
  # Get Normalized Message Histogram
  # Get Histogram on normalized messages.
  # @param start_date Timestamp of earliest message (in milliseconds since epoch).
  # @param end_date Timestamp of latest message (in milliseconds since epoch).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sdid Source device ID of the messages being searched.
  # @option opts [String] :field Message field being queried for building histogram.
  # @option opts [String] :interval Interval of time for building histogram blocks. (Valid values: minute, hour, day, month, year)
  # @return [AggregatesHistogramResponse]
  describe 'get_aggregates_histogram test' do
    it "should work" do
      message = ArtikCloud::Message.new
      message.type = "message"
      message.sdid = device.id
      message.ts = Time.now.to_f*1000
      message.data = {
        :'steps' => 500
      }

      result = instance.send_message(message)
      expect(result).to be_a(ArtikCloud::MessageIDEnvelope)
      message_id = result.data.mid

      sleep(2)

      opts = {
        :mid => message_id
      }

      normalized_messages = instance.get_normalized_messages(opts)
      expect(normalized_messages).to be_a(ArtikCloud::NormalizedMessagesEnvelope)
      expect(normalized_messages.size).to eq 1

      normalized = normalized_messages.data[0]
      expect(normalized.mid).to eq message_id

      volume = normalized.data["steps"]
      expect(volume).to_not be_nil
      expect(volume).to eq 500
    end
  end

  describe 'get_message_snapshots' do
    it 'should work' do
      result = instance.get_message_snapshots(device.id)
      expect(result.sdids).to eq device.id
      expect(result.data.first.sdid).to eq device.id
      expect(result.data.first.data['steps'][:value]).to eq 500
    end
  end

  describe 'send_actions' do
    let(:device) { FactoryGirl.create(:device_tv) }

    it 'should work' do
      action = ArtikCloud::Action.new
      action.name = 'setVolume'
      action.parameters = {'volume' => 5}

      action_array = ArtikCloud::ActionArray.new
      action_array.actions = [action]

      actions = ArtikCloud::Actions.new
      actions.ddid = device.id
      actions.ts = Time.now.to_f*1000
      actions.data = action_array

      mid = instance.send_actions(actions).data.mid

      sleep(2)

      result = instance.get_normalized_actions(
        uid: nil,
        ddid: nil,
        mid: mid,
        offset: nil,
        count: nil,
        startDate: nil,
        endDate: nil,
        order: nil
      )
      expect(result.size).to eq 1

      normalized = result.data[0]
      action_rx = normalized.data.actions[0]

      expect(action_rx.name).to eq 'setVolume'

      volume = action_rx.parameters['volume']
      expect(volume).to_not be_nil
      expect(volume).to eq 5
    end
  end
end
